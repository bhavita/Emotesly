{"version":3,"sources":["EmoteeCard.js","FetchApi.js","MainScreen.js","TwitchEmotee.js","BttvEmotee.js","CustomEmotee.js","App.js","index.js"],"names":["EmoteeCard","type","imgid","imgName","imgCode","ext","category","useState","setCopied","copyToClipBoard","code","a","navigator","clipboard","writeText","readText","top","className","onClick","src","alt","classname","twitchGlobalEmotes","bttvEmotes","customEmotes","NTHelper","fetch","args","Promise","resolve","reject","then","response","json","status","Custom","data","emotes","emote","w","id","cat","console","log","Twitch","lastUpdate","Date","now","match","toLowerCase","BTTV","MainScreen","props","href","fontSize","TwitchEmotee","checkData","twitchemotes","setTwitchemotes","searchValue","setSearchValue","getTwitchEmotee","result","useEffect","value","onChange","event","input","target","filtered","Object","entries","filter","twitch","includes","twitchSearch","map","twitchemote","BttvEmotee","bttvemotees","setBttvemotees","bttvSearchEmotee","setBttvSearchEmotee","getBTTVEmotee","bttv_2","bttv","bttvSearch","d","findSearch","bttvname","CustomEmotee","customEmotee","setCustomEmotee","customSearchEmotee","setCustomSearchEmotee","getCustomEmotee","custom_2","custom","customSearch","App","setCheckBttv","checktwitch","setCheckTwitch","checkcustom","setCheckCustom","checkcustomData","setCheckCustomData","Twitter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2eea143c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './EmoteeCard.css'\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\nimport Pulse from 'react-reveal/Pulse';\n\nfunction EmoteeCard({type,imgid,imgName,imgCode,ext,category}) {\n    const [copied, setCopied] = useState(false)\n    \n    const copyToClipBoard = async(code) => {\n        try {\n            await navigator.clipboard.writeText(imgName);\n            setCopied(true);\n            const text = await navigator.clipboard.readText();\n          } catch (err) {   \n            setCopied(false);\n          }\n    }\n    return (\n        <Pulse top>\n\n        <div className = \"card\" onClick = {copyToClipBoard}  >\n            <div className = \"card__image\">\n                {\n                    type === \"twitch\" ? (<img className=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://static-cdn.jtvnw.net/emoticons/v1/${imgid}/3.0`} alt = \"amotee\"/> ) :\n                   type === \"custom\" ? (<img classname=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://cdn.jsdelivr.net/gh/bhavita/YTStreamChat/assets/emotes/${category}/${imgid}.${ext}`} />)\n                    :(<img className=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://cdn.betterttv.net/emote/${imgid}/3x`} alt = \"amotee\"/>  )           \n         \n\n                }\n\n            </div>\n            <div className = \"card__name\" >\n                <div className = \"card__name__copy\" onClick = {copyToClipBoard}>\n                    <div className=\"card__name_code\">\n                    {imgCode}\n                    </div>\n                    <FileCopyOutlinedIcon className = \"copy__icon\" />\n                </div>\n            </div>\n            \n        </div>\n        </Pulse>    \n        );\n}\n\nexport default EmoteeCard;","\n\nlet twitchGlobalEmotes = {};\nlet bttvEmotes = {};\nlet customEmotes = {}\n\n\nlet NTHelper = {\n\tfetch(...args) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(...args) .then((response) => {\n\t\t\t\tresponse.json().then((json) => {\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tresolve(json);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treject(json);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t},\n}\n/*\nfunction replaceText(text)  {\n    let split = text.split(' ');\n    let newText = [];\n    for (let word of split) {\n        let sword = word.toLowerCase();\n        if (bttvEmotes[sword]) {\n            word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://cdn.betterttv.net/emote/' + bttvEmotes[sword] + '/1x\" alt=\"' + word + '\" title=\"' + word + '\" />';\n        }\n        else if (twitchGlobalEmotes[sword]) {\n            word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://static-cdn.jtvnw.net/emoticons/v1/' + twitchGlobalEmotes[sword] + '/1.0\" alt=\"' + word + '\" title=\"' + word + '\" />';\n        } else if(customEmotes[sword]){\n                let customEmote = customEmotes[sword];\n                word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://cdn.jsdelivr.net/gh/bhavita/YTStreamChat/assets/emotes/' + customEmote.cat + \"/\" +  customEmote.id + \".\" + customEmote.ext  + '\" alt=\"' + word + '\" title=\"' + word + '\" />';\n        }\n\n        newText.push(word);\n    }\n\n    return newText.join(' ');\n}*/\n\nlet SYNC_THRESHOLD = 7200000; //1000*60*60*2\n\nfunction Custom () {\n\t\treturn new Promise((resolve) => {\n\t\t\n\t\t\tNTHelper.fetch('https://cdn.jsdelivr.net/gh/bhavita/YTStreamChat/assets/dictionary.json').then((data) => {\n\n\t\t\t\tif(data && data.emotes){\n\t\t\t\t\tfor(let emote of data.emotes){\n\t\t\t\t\t\tlet w = {\n\t\t\t\t\t\t\t\"id\" :  emote.id,\n\t\t\t\t\t\t\t\"ext\" : emote.ext,\n\t\t\t\t\t\t\t\"cat\" : emote.cat\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcustomEmotes[emote.code] = w;\n\t\t\t\t\t}\n\t\t\t\t}\t\n                console.log(customEmotes)\n                resolve(customEmotes)\n\n\t\t\t\t//chrome.storage.local.set({ customEmotes: customEmotes}, () => resolve()); \n\t\t\t});\n\n        })\n\t\n};\n\nfunction  Twitch  () {\n  \n        return new Promise((resolve) => {\n         \n               NTHelper.fetch('https://api.twitchemotes.com/api/v4/channels/0').then((data) => {\n                   Twitch.lastUpdate = Date.now();\n                   for (let emote of data.emotes) {\n                       if (emote.code.match(/^[a-zA-Z0-9]+$/)) {\n                           twitchGlobalEmotes[emote.code.toLowerCase()] = emote.id;\n                       }\n                   }\n                   //chrome.storage.local.set({ globalTwitchEmotes: twitchGlobalEmotes }, () => resolve());\n                   resolve(twitchGlobalEmotes)\n\n               })\n\n          \n\n       });\n};\n\n\nfunction BTTV() {\n   \n    // const fetchTopEmotes = () =>{\n    //     return new Promise((resolve) => {\n    //         var noBttv = typeof bttvEmotes === 'undefined' || bttvEmotes.length == 0;\n    //         if(noBttv){\n    //             bttvEmotes = items.bttvEmotes || {};\n    //         }\n\n    //         if (noBttv || Date.now() - BTTV.lastUpdateTopEmotes > SYNC_THRESHOLD) {\n    //             return NTHelper.fetch('https://api.betterttv.net/3/emotes/shared/top?offset=0&limit=100').\n    //                 then((data) => {\n    //                 for (let d of data) {\n    //                     let emote = d.emote;\n    //                     bttvEmotes[emote.code.toLowerCase()] = emote.id;\n    //                 }\n    //             }).finally(() => {\n    //                 BTTV.lastUpdateTopEmotes = Date.now();\n    //                 chrome.storage.local.set({bttvEmotes :  bttvEmotes }, () => resolve());\n    //             });\n    //         }\n    //         else {\n    //             resolve();\n    //         }\n    //     });\n    // },\n\n\n        return new Promise((resolve) => {\n            \n                return NTHelper.fetch('https://api.betterttv.net/3/emotes/shared/top?offset=0&limit=100').\n                    then((data) => {\n                    for (let d of data) {\n                        let emote = d.emote;\n                        bttvEmotes[emote.code] = emote.id;\n                    }\n                    resolve(bttvEmotes);\n                })\n                \n          \n        });\n\n    \n\n\n};\n\nexport  {Twitch,BTTV,Custom};\n\n","import React from 'react';\nimport {Instagram,Facebook,GitHub,Twitter,LinkedIn} from '@material-ui/icons';\nimport ExtensionIcon from '@material-ui/icons/Extension';\nimport './MainScreen.css'\nfunction MainScreen(props) {\n    return (\n        <div className = \"main__screen\">\n            <div className = \"smain__info\">\n            <a href=\"https://chrome.google.com/webstore/detail/emotesly/olhclbnmebbgkgodadbepmoifpfmbncm\">\n            <img className=\"logo\" src= {process.env.PUBLIC_URL+\"/img/icon.png\"} href=\"https://chrome.google.com/webstore/detail/emotesly/olhclbnmebbgkgodadbepmoifpfmbncm\"/>\n            </a>\n            <div className = \"main__title\">\n                <h2  >Hi, This is </h2>\n                <h2 className = \"title__effect \">EMOTESLY</h2>\n            </div>\n\n            <div className = \"text__container\">\n                    <h2 className = \"text__effect title__delete\"> Youtube chat enhanced. </h2>\n            </div>\n            <div>\n                {/* <div className = \"container\">\n                <Instagram className = \"insta__icon\" fontSize = \"large\"/>\n                <div className = \"insta__loader\"></div>\n                </div> */}\n\n\n            <div className = \"main__title ext\"> <h2> Download now </h2>\n                             <a href=\"https://chrome.google.com/webstore/detail/emotesly/olhclbnmebbgkgodadbepmoifpfmbncm\">\n                <ExtensionIcon className=\"ml15\" fontSize = \"large\"/>\n                </a>\n            </div>\n\n\n                {/* <div className = \"container\">\n                 <Instagram className = \"insta\" fontSize = \"large\"/>\n                 </div>\n                <Facebook  className = \"fb\"  fontSize = \"large\"/>\n                <GitHub  className = \"github\" fontSize = \"large\"/>\n                <Twitter className = \"twitter\" fontSize = \"large\"/>\n                <LinkedIn  className = \"linkedIn\" fontSize = \"large\"/> */}\n            </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default MainScreen;","import React, { useEffect, useState } from 'react';\nimport EmoteeCard from './EmoteeCard';\nimport { Twitch } from './FetchApi';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Fade from 'react-reveal/Fade';\n\nimport './TwitchEmotee.css'\nfunction TwitchEmotee({checkData}) {\nconst [twitchemotes, setTwitchemotes] = useState([])\nconst [searchValue, setSearchValue] = useState(\"\")\n\n    const getTwitchEmotee =async () => {\n        await Twitch().then(result => Twitch())\n         .then(result=>{\n           setTwitchemotes(result)\n         })\n         console.log(twitchemotes)\n     }\n     \n     const findSearch = (event) => {\n        const input = event.target.value;\n      const filtered = Object.entries(twitchemotes).filter(twitch => {\n        return twitch[0].toLowerCase().includes(input.toLowerCase())\n      })\n   \n      let twitchSearch = {}\n      for (let emote of filtered) {\n        if (emote[0].match(/^[a-zA-Z0-9]+$/)) {\n            twitchSearch[emote[0].toLowerCase()] = emote[1];\n        }\n    }\n     setSearchValue(input)\n     setTwitchemotes(twitchSearch)\n    }\n    useEffect(() => {\n       getTwitchEmotee();\n       twitchemotes?checkData(true) : checkData(false)\n    }, [])\n    return (\n        <div className = \"twitch__emotees__screen\">\n            <div className = \"twitch__search\">\n            <input value = {searchValue} onChange = {findSearch } />\n            <SearchIcon className = \"search__icon\" />\n            </div>\n          \n            <div className = \"emotees__cards\">\n            {\n            Object.entries(twitchemotes).map(([twitchemote,id]) => {\n              return(\n              <EmoteeCard  \n              type = \"twitch\"\n              imgid = {id}\n              imgName = {twitchemote}\n              imgCode =\n                {twitchemote}\n              />\n              )}) \n            }\n            </div>\n        </div>\n    );\n}\n\nexport default TwitchEmotee;","import React, { useEffect, useState } from 'react';\nimport EmoteeCard from './EmoteeCard';\nimport { BTTV } from './FetchApi';\nimport SearchIcon from '@material-ui/icons/Search';\nimport './TwitchEmotee.css'\nfunction BttvEmotee() {\nconst [bttvemotees, setBttvemotees] = useState([])\nconst [bttvSearchEmotee, setBttvSearchEmotee] = useState([])\n\n\nconst [searchValue, setSearchValue] = useState(\"\")\n\n    const getBTTVEmotee =async () => {\n\n        await BTTV().then(result => BTTV())\n         .then(result=>{\n           setBttvemotees(result)\n         })\n     }\n     \n     const findSearch = (input) => {\n        setSearchValue(input)\n        console.log(input)\n        const bttv_2 = bttvemotees;\n        console.log(bttv_2)\n\n        const filtered = Object.entries(bttv_2).filter(bttv => {\n          return bttv[0].toLowerCase().includes(input.toLowerCase())\n        })\n     \n        let bttvSearch = {}\n        for (let d of filtered) {\n         let emote = d[0];\n         bttvSearch[emote] = d[1];\n     }\n       setBttvSearchEmotee(bttvSearch)\n    }\n    useEffect(() => {\n        getBTTVEmotee();\n    }, [])\n    return (\n        <div className = \"twitch__emotees__screen\">\n            <div className = \"twitch__search\">\n            <input value = {searchValue} onChange = {(event)=>findSearch(event.target.value) } />\n            <SearchIcon className = \"search__icon\" />\n            </div>\n            \n            <div className = \"emotees__cards\">\n\n            {\n          Object.entries(searchValue?bttvSearchEmotee : bttvemotees).map(([bttvname,id]) => {\n            return(\n            <EmoteeCard  \n            type = \"bttv\"\n            imgid = {id}\n            imgName = {bttvname}\n            imgCode =\n              {bttvname}\n            />\n            )\n            \n          })\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default BttvEmotee;","import React, { useEffect, useState } from 'react';\nimport EmoteeCard from './EmoteeCard';\nimport { Custom } from './FetchApi';\nimport SearchIcon from '@material-ui/icons/Search';\nimport './TwitchEmotee.css'\nfunction CustomEmotee() {\nconst [customEmotee, setCustomEmotee] = useState([])\nconst [customSearchEmotee, setCustomSearchEmotee] = useState([])\n\n\nconst [searchValue, setSearchValue] = useState(\"\")\n\n    const getCustomEmotee =async () => {\n\n        await Custom().then(result => Custom())\n         .then(result=>{\n           setCustomEmotee(result)\n         })\n     }\n     \n     const findSearch = (input) => {\n        setSearchValue(input)\n        console.log(input)\n        const custom_2 = customEmotee;\n\n        const filtered = Object.entries(custom_2).filter(custom => {\n          return custom[0].toLowerCase().includes(input.toLowerCase())\n        })\n        console.log(filtered)\n        let customSearch = {}\n        for(let emote of filtered){\n          let w = {\n            \"id\" :  emote[1].id,\n            \"ext\" : emote[1].ext,\n            \"cat\" : emote[1].cat\n          }\n\n          customSearch[emote[0]] = w;\n        }\n       setCustomSearchEmotee(customSearch)\n    }\n    useEffect(() => {\n        getCustomEmotee();\n    }, [])\n    return (\n        <div className = \"twitch__emotees__screen\">\n            <div className = \"twitch__search\">\n            <input value = {searchValue} onChange = {(event)=>findSearch(event.target.value) } />\n            <SearchIcon className = \"search__icon\" />\n            </div>\n            \n            <div className = \"emotees__cards\">\n            {\n          Object.entries(searchValue?customSearchEmotee : customEmotee).map(([customEmotee,value]) => {\n              \n            return(\n            <EmoteeCard  \n            type = \"custom\"\n            imgid = {value.id}\n            imgName = {customEmotee}\n            imgCode =\n              {customEmotee}\n              ext = {value.ext}\n                category = {value.cat}\n            />\n            )\n            \n          })\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default CustomEmotee;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport EmoteeCard from './EmoteeCard';\nimport {BTTV,Twitch,Custom} from './FetchApi'\nimport SearchIcon from '@material-ui/icons/Search';\nimport {Autocomplete} from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport MainScreen from './MainScreen';\nimport TwitchEmotee from './TwitchEmotee';\nimport BttvEmotee from './BttvEmotee';\nimport CustomEmotee from './CustomEmotee'\nimport {Instagram,Facebook,GitHub,Twitter,LinkedIn} from '@material-ui/icons';\nimport ExtensionIcon from '@material-ui/icons/Extension';\n\nimport Slide from 'react-reveal/Slide';\n\nconst options = [\n  { id: 0, value: \"foo\" },\n  { id: 1, value: \"goo\" },\n];\n\nfunction App() {\n \n  const [checkBttv, setCheckBttv] = useState(true)\n  const [checktwitch, setCheckTwitch] = useState(false)\n  const [checkcustom, setCheckCustom] = useState(true)\n  const [checkcustomData, setCheckCustomData] = useState(true)\n\n\n\n  const setTwitch = () =>{\n    setCheckTwitch(true)  \n    setCheckBttv(false)  \n    setCheckCustom(false)\n\n  }\n\n  const setBTTV = () =>{\n    setCheckTwitch(false)  \n    setCheckBttv(true)  \n    setCheckCustom(false)\n\n  }\n\n  const setCustom = () =>{\n    setCheckTwitch(false)  \n    setCheckBttv(false)  \n    setCheckCustom(true)\n\n  }\n\n\n  \n\n \n  // useEffect(() => {\n  //   checkBttv == true? getBTTVEmotee() :  custom == true ? getCustomEmotee() :  getTwitchEmotee()\n  \n  // }, [searchValue])\n  return (\n\n\n    <div className=\"App\">\n      <div className='solar-syst'>\n  <div className='sun'></div>\n  <div className ='mercury'></div>\n  <div className='venus'></div>\n  <div className='earth'></div>\n  <div className='mars'></div>\n  <div className='jupiter'></div>\n  <div className='saturn'></div>\n  <div className='uranus'></div>\n  <div className='neptune'></div>\n  <div className='pluto'></div>\n  <div className='asteroids-belt'></div>\n  </div>\n  \n\n      <div className = \"app__screen\">\n\n      <MainScreen/>\n\n      </div>\n      <div className = \"app__screen__about\">\n      <div className = \"main__about__title\">\n                    <h3>About EMOTESLY - INSPIRATION</h3>\n                </div>\n                <Slide top>\n\n                <div className = \"main__about__content\">\n <p> This tool is exclusively made for  \n <a href =\"https://www.youtube.com/channel/UCWxlUwW9BgGISaakjGM37aw\" className=\"link\">\n Valkyrae Youtube channel. \n </a> She is one of the biggest female streamers in the world and the inspiration for Emotesly.\n    She streams on Youtube. And Youtube by features, lacks the support of emotes and thus there is no emote culture in YT Stream chat. \n    Also the moderation tools of Youtube lack capabilities to drive a postive chat. \n    This gave an idea of having support for custom emoticons for Youtube chat as well as additional support for twitch & BTTV emote for Youtube</p>\n               <p>\n               <ul>\n               <li>BTTV support</li>\n               <li>Twitch emotes support</li>\n               <li>Custom emotes for Valkyrae's Youtube channel</li>\n               <li>Colored usernmess</li>\n               <li>Ability to hide profile pictures</li>\n               <li>Enhance Youtube chat experience and make it more aesthetic via stylings </li>\n               </ul>\n             \n               </p>\n\n                               </div>\n                </Slide>\n      </div>\n      <div className = \"app__emotees__section\" id=\"emotes\">\n                    <h3 className = \"app__emotees__section__title\">EMOTESLY</h3>\n                <div className = \"app__emotees__tabs\">\n                  <h3 className = \"app__emotees__tabs__single\" onClick = {setCustom} >CUSTOM EMOTES</h3>\n                  <h3 className = \"app__emotees__tabs__single\" onClick = {setBTTV} >BTTV EMOTES</h3>\n               { checkcustomData?<h3 className = \"app__emotees__tabs__single\" onClick = {setTwitch}>TWITCH EMOTES</h3> : <></>}\n                \n\n                </div>\n              \n                   {\n                    checkcustom?<CustomEmotee/>: checktwitch?<TwitchEmotee checkData = {setCheckCustomData}/>:<BttvEmotee/>\n                  } \n                  \n                \n              \n      </div>\n      <div className = \"contact\">\n        <h2>Contact</h2>\n        <p>\n          Ideas? Thoughts? Reach out to me on \n        </p>\n        <div className = \"contact__icons\">\n                <a href =\"https://twitter.com/BhavitaWasTaken\">\n                <Twitter className = \"twitter\" fontSize = \"large\"/>\n                </a>\n                 <a href=\"https://chrome.google.com/webstore/detail/emotesly/olhclbnmebbgkgodadbepmoifpfmbncm\">\n\n                <ExtensionIcon className = \"ext\" fontSize = \"large\"/>\n                </a>\n\n            </div>\n      </div>\n     \n       \n\n      \n     \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}